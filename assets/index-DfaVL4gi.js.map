{"version":3,"file":"index-DfaVL4gi.js","sources":["../../main-modular.js"],"sourcesContent":["// Aplicação Principal Modular\n// Orquestra todos os módulos para criar a experiência completa\n\nimport { pipeline, env } from '@xenova/transformers';\nimport * as d3 from 'd3';\nimport { SemanticCategories } from './core/SemanticCategories.js';\nimport { WebGPUEngine } from './core/WebGPUEngine.js';\nimport { VisualizationEngine } from './core/VisualizationEngine.js';\n\n// Configuração do ambiente\nenv.allowRemoteModels = true;\nenv.allowLocalModels = false;\n\nclass ModularEmbeddingVisualizer {\n    constructor() {\n        // Estado da aplicação\n        this.model = null;\n        this.isLoading = false;\n        this.currentResults = [];\n        this.currentTab = 'search';\n        this.similarityThreshold = 0.50;\n        this.inputWords = [];\n        \n        // Módulos especializados\n        this.semanticCategories = new SemanticCategories();\n        this.webgpuEngine = new WebGPUEngine();\n        this.visualizationEngine = null; // Inicializado após DOM\n        \n        // Cache para otimização\n        this.embeddingCache = new Map();\n        \n        this.initializeApp();\n    }\n\n    /**\n     * Inicializa a aplicação\n     */\n    async initializeApp() {\n        console.log('🚀 Iniciando Embedding Visualizer Modular v2.0');\n        \n        // Inicializar elementos DOM\n        this.initializeElements();\n        this.setupEventListeners();\n        \n        // Inicializar módulos\n        await this.initializeModules();\n        \n        // Carregar modelo\n        await this.loadModel();\n    }\n\n    /**\n     * Inicializa elementos DOM\n     */\n    initializeElements() {\n        // Elementos de abas\n        this.searchTab = document.getElementById('searchTab');\n        this.mathTab = document.getElementById('mathTab');\n        this.searchTabContent = document.getElementById('searchTabContent');\n        this.mathTabContent = document.getElementById('mathTabContent');\n        \n        // Elementos de busca\n        this.wordInput = document.getElementById('wordInput');\n        this.searchBtn = document.getElementById('searchBtn');\n        this.btnText = this.searchBtn.querySelector('.btn-text');\n        this.loadingSpinner = this.searchBtn.querySelector('.loading-spinner');\n        \n        // Elementos de matemática\n        this.mathExpression = document.getElementById('mathExpression');\n        this.calculateBtn = document.getElementById('calculateBtn');\n        this.calcBtnText = this.calculateBtn.querySelector('.calc-btn-text');\n        this.calcLoadingSpinner = this.calculateBtn.querySelector('.calc-loading-spinner');\n        \n        // Elementos de visualização\n        this.similarWords = document.getElementById('similarWords');\n        this.networkGraph = document.getElementById('networkGraph');\n        this.resultsTitle = document.getElementById('resultsTitle');\n        \n        // Status\n        this.statusText = document.getElementById('statusText');\n        this.progressFill = document.getElementById('progressFill');\n    }\n\n    /**\n     * Configura event listeners\n     */\n    setupEventListeners() {\n        // Sistema de abas\n        this.searchTab.addEventListener('click', () => this.switchTab('search'));\n        this.mathTab.addEventListener('click', () => this.switchTab('math'));\n        \n        // Busca semântica\n        this.searchBtn.addEventListener('click', () => this.performSearch());\n        this.wordInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') this.performSearch();\n        });\n\n        // Exemplos de busca\n        document.querySelectorAll('.example-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                this.wordInput.value = e.target.dataset.word;\n                this.performSearch();\n            });\n        });\n\n        // Cálculo semântico\n        this.calculateBtn.addEventListener('click', () => this.performCalculation());\n        this.mathExpression.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') this.performCalculation();\n        });\n        \n        // Exemplos de cálculo\n        document.querySelectorAll('.math-example-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                this.mathExpression.value = e.target.dataset.expr;\n                this.performCalculation();\n            });\n        });\n    }\n\n    /**\n     * Inicializa módulos especializados\n     */\n    async initializeModules() {\n        console.log('🔧 Inicializando módulos...');\n        \n        // Inicializar WebGPU Engine\n        await this.webgpuEngine.initialize();\n        \n        // Inicializar Visualization Engine\n        this.visualizationEngine = new VisualizationEngine(\n            this.networkGraph,\n            this.semanticCategories.getCategoryColors()\n        );\n        \n        console.log('✅ Módulos inicializados!');\n        console.log('📊 Estatísticas:', this.semanticCategories.getStats());\n    }\n\n    /**\n     * Carrega modelo de embeddings\n     */\n    async loadModel() {\n        try {\n            this.updateStatus('Carregando modelo E5-Small...', 10);\n            \n            this.model = await pipeline('feature-extraction', 'Xenova/multilingual-e5-small', {\n                progress_callback: (progress) => {\n                    if (progress.status === 'downloading') {\n                        const percent = Math.round((progress.loaded / progress.total) * 80);\n                        this.updateStatus(`Baixando: ${percent}%`, percent);\n                    } else if (progress.status === 'loading') {\n                        this.updateStatus('Carregando modelo...', 85);\n                    }\n                }\n            });\n            \n            // Teste do modelo\n            this.updateStatus('Testando modelo...', 90);\n            const testEmbedding = await this.getEmbedding('teste');\n            console.log('✅ Modelo testado:', testEmbedding.length, 'dimensões');\n            \n            this.updateStatus('Sistema pronto!', 100);\n            this.enableInterface();\n            \n            setTimeout(() => {\n                document.getElementById('statusBar').style.display = 'none';\n            }, 2000);\n            \n        } catch (error) {\n            console.error('❌ Erro ao carregar modelo:', error);\n            this.updateStatus('Erro ao carregar modelo. Recarregue a página.', 0);\n        }\n    }\n\n    /**\n     * Obtém embedding com cache\n     */\n    async getEmbedding(text) {\n        if (!this.model) {\n            throw new Error('Modelo não carregado');\n        }\n        \n        // Verificar cache\n        if (this.embeddingCache.has(text)) {\n            return this.embeddingCache.get(text);\n        }\n        \n        try {\n            const processedText = text.toLowerCase().trim();\n            const output = await this.model(processedText, { \n                pooling: 'mean', \n                normalize: true \n            });\n            \n            const embeddingData = Array.from(output.data || output);\n            \n            if (!embeddingData || embeddingData.length === 0) {\n                throw new Error('Embedding vazio');\n            }\n            \n            // Armazenar no cache\n            this.embeddingCache.set(text, embeddingData);\n            \n            return embeddingData;\n            \n        } catch (error) {\n            console.error(`Erro ao processar \"${text}\":`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Calcula similaridades usando WebGPU ou CPU\n     */\n    async computeSimilarities(targetEmbedding, embeddings) {\n        try {\n            return await this.webgpuEngine.computeCosineSimilarity(targetEmbedding, embeddings);\n        } catch (error) {\n            console.warn('Fallback para CPU:', error);\n            return this.webgpuEngine.computeCosineSimilarityCPU(targetEmbedding, embeddings);\n        }\n    }\n\n    /**\n     * Realiza busca semântica\n     */\n    async performSearch() {\n        const word = this.wordInput.value.trim();\n        if (!word || this.isLoading || !this.model) return;\n\n        this.clearResults();\n        this.setSearchLoading(true);\n        \n        try {\n            this.inputWords = [word.toLowerCase()];\n            \n            console.log(`🔍 Busca: \"${word}\"`);\n            const category = this.semanticCategories.getCategoryForWord(word);\n            console.log(`📂 Categoria: ${category.name}`);\n            \n            // Calcular embeddings\n            const targetEmbedding = await this.getEmbedding(word);\n            const vocabulary = this.semanticCategories.getVocabulary();\n            const wordsToCompare = vocabulary.filter(w => w.toLowerCase() !== word.toLowerCase());\n            \n            // Processar em lotes\n            const embeddings = await this.processEmbeddingsBatch(wordsToCompare);\n            \n            // Calcular similaridades\n            const similarities = await this.computeSimilarities(targetEmbedding, embeddings);\n            \n            // Aplicar ranking\n            this.currentResults = this.rankResults(word, wordsToCompare, similarities);\n            \n            console.log(`✅ ${this.currentResults.length} resultados encontrados`);\n            \n            this.resultsTitle.textContent = `Busca: \"${word}\" (${category.name}) - ${this.currentResults.length} resultados`;\n            this.displayResults();\n            \n        } catch (error) {\n            console.error('Erro na busca:', error);\n            alert('Erro ao buscar palavras similares.');\n        } finally {\n            this.setSearchLoading(false);\n        }\n    }\n\n    /**\n     * Realiza cálculo semântico\n     */\n    async performCalculation() {\n        const expression = this.mathExpression.value.trim();\n        if (!expression || this.isLoading || !this.model) return;\n\n        this.clearResults();\n        this.setCalcLoading(true);\n        \n        try {\n            const parsedExpression = this.parseExpression(expression);\n            if (!parsedExpression) {\n                alert('Formato inválido. Use: palavra1 + palavra2 ou palavra1 - palavra2');\n                return;\n            }\n\n            this.inputWords = parsedExpression.map(item => item.word.toLowerCase());\n            \n            console.log(`🧮 Cálculo: \"${expression}\"`);\n            \n            // Calcular embedding resultante\n            let resultEmbedding = await this.getEmbedding(parsedExpression[0].word);\n            \n            for (let i = 1; i < parsedExpression.length; i++) {\n                const item = parsedExpression[i];\n                const embedding = await this.getEmbedding(item.word);\n                \n                if (item.operation === '+') {\n                    resultEmbedding = resultEmbedding.map((val, idx) => val + embedding[idx]);\n                } else {\n                    resultEmbedding = resultEmbedding.map((val, idx) => val - embedding[idx]);\n                }\n            }\n            \n            // Normalizar\n            const magnitude = Math.sqrt(resultEmbedding.reduce((sum, val) => sum + val * val, 0));\n            resultEmbedding = resultEmbedding.map(val => val / magnitude);\n            \n            // Encontrar similares\n            const vocabulary = this.semanticCategories.getVocabulary();\n            const wordsToCompare = vocabulary.filter(word => \n                !this.inputWords.includes(word.toLowerCase())\n            );\n            \n            const embeddings = await this.processEmbeddingsBatch(wordsToCompare);\n            const similarities = await this.computeSimilarities(resultEmbedding, embeddings);\n            \n            this.currentResults = this.rankResults(this.inputWords[0], wordsToCompare, similarities);\n            \n            console.log(`✅ ${this.currentResults.length} resultados do cálculo`);\n            \n            this.resultsTitle.textContent = `Cálculo: ${expression} - ${this.currentResults.length} resultados`;\n            this.displayResults();\n            \n        } catch (error) {\n            console.error('Erro no cálculo:', error);\n            alert('Erro ao realizar cálculo.');\n        } finally {\n            this.setCalcLoading(false);\n        }\n    }\n\n    /**\n     * Processa embeddings em lotes para otimização\n     */\n    async processEmbeddingsBatch(words, batchSize = 25) {\n        const embeddings = [];\n        \n        for (let i = 0; i < words.length; i += batchSize) {\n            const batch = words.slice(i, i + batchSize);\n            const batchEmbeddings = await Promise.all(\n                batch.map(w => this.getEmbedding(w))\n            );\n            embeddings.push(...batchEmbeddings);\n        }\n        \n        return embeddings;\n    }\n\n    /**\n     * Aplica ranking aos resultados\n     */\n    rankResults(baseWord, words, similarities) {\n        const rankedResults = words.map((w, i) => {\n            const cosineSim = similarities[i];\n            const advancedSim = this.semanticCategories.calculateAdvancedSimilarity(baseWord, w, cosineSim);\n            \n            return {\n                word: w,\n                similarity: advancedSim,\n                cosine: cosineSim,\n                category: this.semanticCategories.getCategoryForWord(w).name\n            };\n        });\n        \n        return rankedResults\n            .filter(r => r.similarity >= this.similarityThreshold)\n            .sort((a, b) => b.similarity - a.similarity)\n            .slice(0, 12);\n    }\n\n    /**\n     * Parse de expressões matemáticas\n     */\n    parseExpression(expression) {\n        const tokens = expression.replace(/\\s+/g, ' ').split(/\\s*([+-])\\s*/);\n        \n        if (tokens.length < 3) return null;\n        \n        const result = [{ word: tokens[0].trim(), operation: null }];\n        \n        for (let i = 1; i < tokens.length; i += 2) {\n            const operation = tokens[i];\n            const word = tokens[i + 1];\n            \n            if ((operation === '+' || operation === '-') && word) {\n                result.push({ word: word.trim(), operation });\n            }\n        }\n        \n        return result.length > 1 ? result : null;\n    }\n\n    /**\n     * Troca de abas\n     */\n    switchTab(tab) {\n        console.log(`🔄 Trocando para: ${tab}`);\n        this.clearResults();\n        this.currentTab = tab;\n        \n        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));\n        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));\n        \n        if (tab === 'search') {\n            this.searchTab.classList.add('active');\n            this.searchTabContent.classList.add('active');\n        } else {\n            this.mathTab.classList.add('active');\n            this.mathTabContent.classList.add('active');\n        }\n    }\n\n    /**\n     * Exibe resultados\n     */\n    displayResults() {\n        if (!this.currentResults.length) return;\n        \n        console.log('🎨 displayResults iniciado com', this.currentResults.length, 'resultados');\n        \n        // Lista\n        console.log('📋 Renderizando lista...');\n        this.visualizationEngine.renderResultsList(\n            this.currentResults,\n            this.similarWords,\n            (word) => {\n                if (this.currentTab === 'search') {\n                    this.wordInput.value = word;\n                    this.performSearch();\n                } else {\n                    this.mathExpression.value = word;\n                }\n            }\n        );\n        console.log('✅ Lista renderizada');\n        \n        // Grafo\n        const centralWord = this.currentTab === 'search' ? \n            (this.wordInput.value || 'centro') : \n            (this.mathExpression.value || 'cálculo');\n            \n        console.log('🕸️ Renderizando grafo para palavra central:', centralWord);\n        console.log('📊 Dados para o grafo:', {\n            results: this.currentResults.length,\n            inputWords: this.inputWords,\n            centralWord: centralWord\n        });\n        \n        try {\n            this.visualizationEngine.renderInteractiveGraph(\n                this.currentResults,\n                this.inputWords,\n                centralWord,\n                (word) => {\n                    if (this.currentTab === 'search') {\n                        this.wordInput.value = word;\n                        this.performSearch();\n                    } else {\n                        this.mathExpression.value = word;\n                    }\n                },\n                // Passar métodos necessários para o grafo\n                (text) => this.getEmbedding(text),\n                (targetEmbedding, embeddings) => this.computeSimilarities(targetEmbedding, embeddings),\n                this.semanticCategories\n            );\n            console.log('✅ Chamada do grafo concluída');\n        } catch (error) {\n            console.error('❌ Erro ao renderizar grafo:', error);\n        }\n    }\n\n    /**\n     * Limpa resultados\n     */\n    clearResults() {\n        this.currentResults = [];\n        this.inputWords = [];\n        this.similarWords.innerHTML = '';\n        this.networkGraph.innerHTML = '';\n        this.resultsTitle.textContent = 'Resultados';\n    }\n\n    /**\n     * Controla loading da busca\n     */\n    setSearchLoading(loading) {\n        this.isLoading = loading;\n        this.searchBtn.disabled = loading;\n        \n        if (loading) {\n            this.btnText.style.display = 'none';\n            this.loadingSpinner.style.display = 'inline';\n        } else {\n            this.btnText.style.display = 'inline';\n            this.loadingSpinner.style.display = 'none';\n        }\n    }\n\n    /**\n     * Controla loading do cálculo\n     */\n    setCalcLoading(loading) {\n        this.isLoading = loading;\n        this.calculateBtn.disabled = loading;\n        \n        if (loading) {\n            this.calcBtnText.style.display = 'none';\n            this.calcLoadingSpinner.style.display = 'inline';\n        } else {\n            this.calcBtnText.style.display = 'inline';\n            this.calcLoadingSpinner.style.display = 'none';\n        }\n    }\n\n    /**\n     * Atualiza status\n     */\n    updateStatus(text, progress) {\n        this.statusText.textContent = text;\n        this.progressFill.style.width = `${progress}%`;\n    }\n\n    /**\n     * Habilita interface\n     */\n    enableInterface() {\n        this.searchBtn.disabled = false;\n        this.calculateBtn.disabled = false;\n        this.wordInput.disabled = false;\n        this.mathExpression.disabled = false;\n    }\n\n    /**\n     * Finaliza aplicação\n     */\n    dispose() {\n        this.webgpuEngine.dispose();\n        this.visualizationEngine.dispose();\n        this.embeddingCache.clear();\n        console.log('🧹 Aplicação finalizada');\n    }\n}\n\n// Inicializar aplicação modular\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.embeddingVisualizer = new ModularEmbeddingVisualizer();\n}); "],"names":["env","allowRemoteModels","allowLocalModels","ModularEmbeddingVisualizer","constructor","this","model","isLoading","currentResults","currentTab","similarityThreshold","inputWords","semanticCategories","SemanticCategories","webgpuEngine","WebGPUEngine","visualizationEngine","embeddingCache","Map","initializeApp","console","log","initializeElements","setupEventListeners","initializeModules","loadModel","searchTab","document","getElementById","mathTab","searchTabContent","mathTabContent","wordInput","searchBtn","btnText","querySelector","loadingSpinner","mathExpression","calculateBtn","calcBtnText","calcLoadingSpinner","similarWords","networkGraph","resultsTitle","statusText","progressFill","addEventListener","switchTab","performSearch","e","key","querySelectorAll","forEach","btn","value","target","dataset","word","performCalculation","expr","initialize","VisualizationEngine","getCategoryColors","getStats","updateStatus","pipeline","progress_callback","progress","status","percent","Math","round","loaded","total","testEmbedding","getEmbedding","length","enableInterface","setTimeout","style","display","error","text","Error","has","get","processedText","toLowerCase","trim","output","pooling","normalize","embeddingData","Array","from","data","set","computeSimilarities","targetEmbedding","embeddings","computeCosineSimilarity","warn","computeCosineSimilarityCPU","clearResults","setSearchLoading","category","getCategoryForWord","name","wordsToCompare","getVocabulary","filter","w","processEmbeddingsBatch","similarities","rankResults","textContent","displayResults","alert","expression","setCalcLoading","parsedExpression","parseExpression","map","item","resultEmbedding","i","embedding","operation","val","idx","magnitude","sqrt","reduce","sum","includes","words","batchSize","batch","slice","batchEmbeddings","Promise","all","push","baseWord","cosineSim","similarity","calculateAdvancedSimilarity","cosine","r","sort","a","b","tokens","replace","split","result","tab","classList","remove","content","add","renderResultsList","centralWord","results","renderInteractiveGraph","innerHTML","loading","disabled","width","dispose","clear","window","embeddingVisualizer"],"mappings":"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"}